#!/usr/bin/ruby
require 'stringio'
require 'logger'
require 'pp'

load './fortran_parser.rb'

if ARGV.size != 1
  STDERR.puts "Usage: #$0 INFILE"
  exit 1
end

class BrokenCommentNode < SyntaxNode
  def self.accept(line, stack, line_counter, new_indentation, comments)
    if line =~ /^\s*set(.*)/i
      # simply erase this line by not creating any node for it
      return true
    end
  end
end

parser = FortranParser.new([BrokenCommentNode])
tree = parser.parse_file(ARGV[0])

tree.prune do |node|
  (node.type == :using)
end

tree.prune do |node|
  (node.type == :assignment) && (node.cargo[0] =~ /GRID/)
end

tree.prune do |node|
  (node.type == :do_loop) && node.children.empty?
end

tree.prune do |node|
  (node.type == :do_loop) && node.children.empty?
end

tree.prune do |node|
  (node.type == :do_loop) && node.children.empty?
end

tree.each do |node|
  if (node.type == :subroutine) && (node.name =~ /MG_STENCIL_/)
    node.name = node.name + "_CPP"

    node.prefix_template_param("DOUBLE")
    node.add_param("NEIGHBORHOOD2", "WORK")
    node.add_param("INT1",  "MG_PERF_NUM_ADDS")
    node.add_param("INT2",  "MG_PERF_NUM_DIVIDES")
    node.add_param("INT3",  "MG_PERF_NUM_COPY")
    node.add_param("INT4",  "NX")
    node.add_param("INT5",  "NY")
    node.add_param("INT6",  "NZ")
    node.add_param("INT7",  "FIVE")
    node.add_param("INT8",  "NINE")
    node.add_param("INT9",  "SEVEN")
    node.add_param("INT10", "TWENTYSEVEN")
   end
end

tree.each do |node|
  if (node.type == :do_loop) && (node.cargo.index == "I")
    node.cargo.stride = "DOUBLE::ARITY"
  end
end

# puts tree.to_s
# print_tree tree
# subtree = tree[[[:module, "MG_STENCIL_COMPS_MOD"], [:subroutine, "MG_STENCIL_2D5PT"]]]

# puts subtree
# puts subtree.to_cpp

# puts tree
puts tree.to_cpp
