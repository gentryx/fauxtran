#!/usr/bin/ruby
require 'pathname'
require 'stringio'
require 'logger'
require 'pp'

require_relative 'fortran_parser'
# parser_file = Pathname.new($0).parent + "fortran_parser.rb"
# load parser_file

if ARGV.size != 1
  STDERR.puts "Usage: #$0 INFILE"
  exit 1
end

class BrokenCommentNode < SyntaxNode
  def self.accept(line, stack, line_counter, new_indentation, comments)
    if line =~ /^\s*set(.*)/i
      # simply erase this line by not creating any node for it
      return true
    end
  end
end

parser = FortranParser.new([BrokenCommentNode])
tree = parser.parse_file(ARGV[0])

# ====================================
# minighost script:
# tree.prune do |node|
#   (node.type == :using)
# end

# tree.prune do |node|
#   (node.type == :assignment) && (node.cargo[0] =~ /GRID/)
# end

# tree.prune do |node|
#   (node.type == :do_loop) && node.children.empty?
# end

# tree.prune do |node|
#   (node.type == :do_loop) && node.children.empty?
# end

# tree.prune do |node|
#   (node.type == :do_loop) && node.children.empty?
# end

# tree.each do |node|
#   if (node.type == :subroutine) && (node.name =~ /MG_STENCIL_/)
#     node.name = node.name + "_CPP"

#     node.prefix_template_param("DOUBLE")
#     node.add_param("NEIGHBORHOOD2", "WORK")
#     node.add_param("INT1",  "MG_PERF_NUM_ADDS")
#     node.add_param("INT2",  "MG_PERF_NUM_DIVIDES")
#     node.add_param("INT3",  "MG_PERF_NUM_COPY")
#     node.add_param("INT4",  "NX")
#     node.add_param("INT5",  "NY")
#     node.add_param("INT6",  "NZ")
#     node.add_param("INT7",  "FIVE")
#     node.add_param("INT8",  "NINE")
#     node.add_param("INT9",  "SEVEN")
#     node.add_param("INT10", "TWENTYSEVEN")
#   end
# end

# tree.each do |node|
#   if (node.type == :do_loop) && (node.cargo.index == "I")
#     node.cargo.stride = "DOUBLE::ARITY"
#   end
# end

# puts tree.to_s
# print_tree tree
# subtree = tree[[[:module, "MG_STENCIL_COMPS_MOD"], [:subroutine, "MG_STENCIL_2D5PT"]]]
# ====================================

# puts subtree
# puts subtree.to_cpp

# puts tree

module_tree = tree[[[:module, "GLOBAL_DATA"]]]
kernel_tree = tree[[[:subroutine, "KERNEL"]]]

kernel_tree.add_param("TYPE1", "N")
kernel_tree.add_param("TYPE2", "*ALIVE")
kernel_tree.add_param("TYPE3", "*NUMNEIGHBORS")
kernel_tree.add_param("TYPE4", "(*NEIGHBORS)[20]")
kernel_tree.add_param("TYPE5", "*NEW_ALIVE")

kernel_tree.prune do |node|
  (node.type == :using)
end

# convert loop boundaries to C/C++
kernel_tree.each do |node|
  if node.matches(:do_loop, "")
    node.one_off_limits
  end
end

puts "------------------------"
puts tree.to_cpp
puts "------------------------"
puts tree
puts "------------------------"
puts module_tree.to_cpp
puts "------------------------"
puts kernel_tree.to_cpp
puts "------------------------"
